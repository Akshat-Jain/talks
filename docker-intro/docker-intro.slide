Docker
Why should I care ?

Muhammad Falak R Wani
https://github.com/mfrw/talks/tree/master/docker-intro
falak16018@iiitd.ac.in


* I assume no prior knowledge*.

* Agenda

- Part 0: *Foundations*
- Part I: *Basics*
- Part II: *Intermediate*
- Part III: *Black-Belt*

Starting with first principle

* Foundations

Building the Ground 

- Linux Architecture
- Role Of the Kernel
- Role Of the User-Space
- Virtualization Techniques
- Using Chroot
- Using Qemu
- Analogy of virtualenv (Python)

* Basics

- Using Docker
- Container
- Containers are Stateless ? (bug/feature)
- Images
- Docker Volumes
- Docker Files
- Some Use-cases
- DockerHub (analogy github.com)

* Intermediate

- Internals of docker run
- Making GUI work in docker
- Making Sound work in docker
- Docker Compose

 How do I use docker

* Black-Belt

- Let's Write a Toy Docker Implementation

* Foundations

* Linux Architecture I

 ls /
.code src/ls.txt

What Happens when you type a command @ the $SHELL

- A search in the $PATH variable
- Stop on the first match found
- The Type of executeable determined (*file*)
- Some _insane_ mechanism executes it
- Return To the $SHELL prompt

* Linux Architecture II

The system (*nix) has two parts

- The user-space (programs, including the $SHELL)
- The kernel (Actual OS)

Both are essential and cannot exist* without each-other
BUT
Both are *Plugable/Swapable* !

 Hardware is stateless !!

* What makes your Computer Statefull ?

* Linux Architecture III

Normal System

.image images/linux.jpg 450 _

* Linux Architecture IV

Hypervisor Type II (Virtual Box)

.image images/hv.jpg 450 _

* Linux Architecture V

Docker

.image images/docker.jpg 450 _

* Chroot

Unix v7 in 1979: *Bill* *Joy*

- Download *busybox*
- Compile it ... 

.code src/chroot.sh

- Securit Risk :(
- No Real Isolation :(

* Sandboxes

.image images/sandbox.jpg


* Using qemu

- Quick Emulator
 qemu-system-x86_64 -boot d -cdrom random_os.iso -m 2048M -smp 4 -enable-kvm

- -enable-kvm => Uses features of new CPUs to speed up.
- -smp        => The number of cores
- -boot       => boot from hda/dvd etc etc
- -m          => RAM

* Qemu cpu emulator

qemu-system emulates a full system

qemu-arm (qemu-x86, qemu-ppc ...) emulate only the cpu, so you can run commands

 qemu-arm some_random_arm_binary


* One last analogy

virtualenv (python)

It changes the shells interpretation of python

- You can always work with weired setups
- You dont distrub your system
- Python2/Python3 .. wont give you any pain

.code src/virtualenv.sh

* Buzz Word: Container 

* How does it look like

.image images/container.png 500 _

* Forget Configurations

.image images/build_ship_run.png 500 _

* What is a container

- An isolated environment (similar as a vm)
- In Linux it is implemented by using cgroups and namespaces
- NO SUCH THING as a CONTAINER in the kernel
- Its just a namesake given to an isolated environment.
- You dont just ship your code, but package the depencies and configuration.
- No more dependcy hell.
- Stuff just works magically.

Solves the problem of:

 Works on my machine 

* Why exactly should I care?

.image images/y_should_i_care.png 600 _

* Docker

Install:
.link https://docs.docker.com/engine/installation/ https://docs.docker.com/engine/installation
.code src/postinst.sh

First steps:

 docker container run hello-world

.code src/docker.sh

* What Just happened

.image images/what_just_happend.svg 450 _

* What Just happened

- You did not have the hello-world image so docker downloaded it from a *registry*
- Using the hello world image, a container was provisioned
- The code inside the container executed.
- The code finished, the container exited.
 Its still lying around unless you explicitly remove it
- You can restart a stopped container.

* Time for memes

* When you ship code!

.image images/works.jpg 500 _

* Slack time

.image images/slack1.jpg 500 _

* Docker essentials

- docker *ps* (show what containers are running)
- docker *images* (show your local images)
- docker *run* (run an image)
- docker *pull* (get an image from a registry)
- docker *rm* (remove a stopped container)
- docker *rmi* (remove an image)
- docker *exec* (run a command in a running container)

!so essentials:

- docker info
- docker inspect
- docker network
- .....

* docker run

Interactive usage (CTRL-P + CTRL-Q to detach)

 docker run -it image-name [command]
 -i => Keep STDIN open even if not attached
 -t => Allocate a pseudo-tty

Detached usage

 docker run -d image-name [command]
 -d => Run container in background and print container ID

Other flags
 
 --cpu-shares   => CPU shares (relative weight)
 --hostname     => Container host name
 --memory       => Memory limit
 -p, --publish  => Publish a container's port(s) to the host
 -v, --volume   => Bind mount a volume
 -w, --workdir  => Working directory inside the container
  
docker run --help | docker container run --help

* docker ps

Show running containers:

 docker ps

Show all containers running and Exited:

 docker ps -a

Restart a stopped container

 docker start #hash

Clean all stopped containers:

 docker rm $(docker ps -aq)

* Things to remember

- A container in itself is a full machine (s/w) without kernel
- A container has its own IP address.
- Its own networking interface.
- Is completely* Isolated to the host.
- You can nuke a container .. 

 rm -rf / 

Ports can be *EXPOSED* from the container to the host. (-p)
Files can be *SHARED*  to and fro the host and the container. (-v)

* Ports and Files

To expose a port from a container to the host:

 docker run -it -p 8080:80 nginx
 -p   => Expose ports
 8080 => Host Port
 80   => Container Port

To share files with a container:

 docker run -it -v /home/$(whoami):/data alpine sh
 -v              => Bind Mount a Volume
 /home/$(whoami) => Host Path
 /data           => Container path
