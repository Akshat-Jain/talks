Docker
Why should I care ?

Muhammad Falak R Wani
https://github.com/mfrw/talks/tree/master/docker-intro
falak16018@iiitd.ac.in


* I assume no prior knowledge whatsoever.

* Agenda

- Part 0: *Foundations*
- Part I: *Basics*
- Part II: *Intermediate*
- Part III: *Black-Belt*

Starting with first principle

* Foundations

Building the Ground 

- Linux Architecture
- Role Of the Kernel
- Role Of the User-Space
- Virtualization Techniques
- Using Chroot
- Using Qemu
- Analogy of virtualenv (Python)

* Basics

- Using Docker
- Container
- Containers are Stateless ? (bug/feature)
- Images
- Docker Volumes
- Docker Files
- Some Use-cases
- DockerHub (analogy github.com)

* Intermediate

- Internals of docker run
- Making GUI work in docker
- Making Sound work in docker
- Docker Compose

 How do I use docker

* Black-Belt

- Let's Write a Toy Docker Implementation

* Foundations

* Linux Architecture I

 ls /
.code src/ls.txt

What Happens when you type a command @ the $SHELL

- A search in the $PATH variable
- Stop on the first match found
- The Type of executeable determined (*file*)
- Some _insane_ mechanism executes it
- Return To the $SHELL prompt

* Linux Architecture II

The system (*nix) has two parts

- The user-space (programs, including the $SHELL)
- The kernel (Actual OS)

Both are essential and cannot exist* without each-other
BUT
Both are *Plugable/Swapable* !

 Hardware is stateless !!

* What makes your Computer Statefull ?

* Linux Architecture III

Normal System

.image images/linux.jpg 450 _

* Linux Architecture IV

Hypervisor Type II (Virtual Box)

.image images/hv.jpg 450 _

* Linux Architecture V

Docker

.image images/docker.jpg 450 _

* Chroot

Unix v7 in 1979: *Bill* *Joy*

- Download *busybox*
- Compile it ... 

.code src/chroot.sh

- Securit Risk :(
- No Real Isolation :(

* Sandboxes

.image images/sandbox.jpg


* Using qemu

- Quick Emulator
 qemu-system-x86_64 -boot d -cdrom random_os.iso -m 2048M -smp 4 -enable-kvm

- -enable-kvm => Uses features of new CPUs to speed up.
- -smp        => The number of cores
- -boot       => boot from hda/dvd etc etc
- -m          => RAM

* Qemu cpu emulator

qemu-system emulates a full system

qemu-arm (qemu-x86, qemu-ppc ...) emulate only the cpu, so you can run commands

 qemu-arm some_random_arm_binary


* One last analogy

virtualenv (python)

It changes the shells interpretation of python

- You can always work with weired setups
- You dont distrub your system
- Python2/Python3 .. wont give you any pain

.code src/virtualenv.sh

* Docker

Install:
.link https://docs.docker.com/engine/installation/ https://docs.docker.com/engine/installation
.code src/postinst.sh

First steps:

 docker container run hello-world

.code src/docker.sh
